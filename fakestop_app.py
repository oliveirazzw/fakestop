import streamlit as st
from crewai import Agent, Task, Crew, Process, LLM
from dotenv import load_dotenv
import os
import sqlite3

# Carregar vari√°veis de ambiente
load_dotenv()             
openai_api_key = os.getenv("OPENAI_API_KEY")

# Inicializa o modelo de linguagem com o provedor correto (GPT-4o-mini)
llm = LLM(
    model="gpt-4o-mini",  # Especificando o modelo gpt-4o mini
    temperature=0.7
)

# === AGENTES: COLETOR, LINGUISTA E VERIFICADOR ===

coletor = Agent(
    role="Agente Coletor",
    goal="Buscar e apresentar not√≠cias semelhantes √† fornecida",
    backstory="Especialista em recuperar textos similares da internet ou arquivos hist√≥ricos",
    verbose=True,
    llm=llm
)

linguista = Agent(
    role="Agente Lingu√≠stico",
    goal="Avaliar o tom, estilo e estrutura da not√≠cia",
    backstory="Expert em an√°lise lingu√≠stica e detec√ß√£o de padr√µes ret√≥ricos",
    verbose=True,
    llm=llm
)

verificador = Agent(
    role="Agente Verificador de Fatos",
    goal="Comparar as informa√ß√µes da not√≠cia com dados verific√°veis e confi√°veis",
    backstory="Profissional de checagem de fatos com acesso a v√°rias fontes verificadas",
    verbose=True,
    llm=llm
)

# === TAREFAS DOS AGENTES ACIMA ===

tarefa_coletor = Task(
    description="Coletar not√≠cias semelhantes √† seguinte: {{noticia}}",
    expected_output="Uma lista de resumos de not√≠cias semelhantes encontradas.",
    agent=coletor
)

tarefa_linguista = Task(
    description="Analisar o tom, estilo e estrutura da seguinte not√≠cia: {{noticia}}",
    expected_output="Um relat√≥rio descrevendo o tom (neutro, sensacionalista, alarmista, etc), estilo de escrita e padr√µes lingu√≠sticos detectados.",
    input="coletor_md",
    agent=linguista,
    output_file="analise_linguistica.md"
)

tarefa_verificador = Task(
    description="Comparar a seguinte not√≠cia com fatos reais e bancos de dados confi√°veis: {{noticia}}",
    expected_output="Uma verifica√ß√£o detalhada dos principais pontos da not√≠cia, indicando se h√° inconsist√™ncias ou falsas alega√ß√µes.",
    input="analise_linguistica.md",
    agent=verificador
)

# == Agente classificador e sua tarefa

classificador = Agent(
    role="Agente Classificador",
    goal="Determinar se a not√≠cia √© confi√°vel, d√∫bia ou falsa, com justificativa",
    backstory="Analista final respons√°vel por classificar a not√≠cia com base nos dados dos outros agentes",
    verbose=True,
    llm=llm
)

tarefa_classificador = Task(
    description="Com base nas an√°lises anteriores, classifique a seguinte not√≠cia: {{noticia}}",
    expected_output="Classifica√ß√£o final: Confi√°vel, D√∫bia ou Falsa, com justificativa.",
    agent=classificador
)

# === CREW - Primeira Crew (Coletor, Linguista e Verificador) ===

equipe = Crew(
    agents=[coletor, linguista, verificador],
    tasks=[tarefa_coletor, tarefa_linguista, tarefa_verificador],
    process=Process.sequential,
    verbose=True
)

# === CREW - Segunda Crew (Classificador) ===
eqp_classificacao = Crew(
    agents=[classificador],
    tasks=[tarefa_classificador],
    process=Process.sequential,
    llm=llm
)

# === Fun√ß√µes do Banco de Dados ===

# Conectar ao banco de dados SQLite
def conectar_db():
    return sqlite3.connect('analises.db')

# Fun√ß√£o para criar a tabela de an√°lises, caso n√£o exista
def criar_tabela():
    conn = conectar_db()
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS analises (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        noticia TEXT,
        coletor_resultado TEXT,
        linguista_resultado TEXT,
        verificador_resultado TEXT,
        classificacao_resultado TEXT,
        data TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    conn.commit()
    conn.close()

# Criar a tabela ao iniciar o aplicativo
criar_tabela()

# Inserir dados no banco de dados
def inserir_analise(noticia, coletor_resultado, linguista_resultado, verificador_resultado, classificacao_resultado):
    conn = conectar_db()
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO analises (noticia, coletor_resultado, linguista_resultado, verificador_resultado, classificacao_resultado)
    VALUES (?, ?, ?, ?, ?)
    ''', (noticia, coletor_resultado, linguista_resultado, verificador_resultado, classificacao_resultado))
    conn.commit()
    conn.close()

# Buscar hist√≥rico de an√°lises
def buscar_historico():
    conn = conectar_db()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM analises ORDER BY id DESC')
    historico = cursor.fetchall()
    conn.close()
    return historico

# === INTERFACE STREAMLIT ===

# Fun√ß√£o para exibir o hist√≥rico de an√°lises
def exibir_historico():
    historico = buscar_historico()
    if historico:
        for analise in historico:
            st.subheader(f"An√°lise #{analise[0]}")
            st.write(f"**Not√≠cia:** {analise[1]}")
            st.write(f"**Resultado do Coletor:** {analise[2]}")
            st.write(f"**Resultado do Linguista:** {analise[3]}")
            st.write(f"**Resultado do Verificador:** {analise[4]}")
            st.write(f"**Resultado da Classifica√ß√£o:** {analise[5]}")
            st.divider()
    else:
        st.write("Ainda n√£o h√° hist√≥rico de an√°lises.")

# Fun√ß√£o para exibir os resultados das tarefas da primeira crew
def exibir_resultados_primeira_crew(resultado):
    try:
        if hasattr(resultado, 'tasks_output'):
            tasks_output = resultado.tasks_output  # Usando um m√©todo para acessar os outputs das tarefas
            for i, task_output in enumerate(tasks_output):
                st.subheader(f"üßë‚Äçüíº {task_output.agent} - Tarefa {i+1}")
                st.markdown(f"**Descri√ß√£o da Tarefa:**\n\n{task_output.description}")
                st.markdown(f"**Resultado:**\n\n{task_output.raw.strip()}")
                st.divider()
        else:
            st.error("A chave ou m√©todo 'tasks_output' n√£o foi encontrado no resultado.")
    except Exception as e:
        st.error(f"Erro ao acessar os dados: {str(e)}")
        
st.title("üîç Verificador de Not√≠cias com IA - CrewAI")

# Criar abas
aba_analise, aba_historico = st.tabs(["üì∞ Nova An√°lise", "üìö Hist√≥rico de An√°lises"])

with aba_analise:
    noticia = st.text_area("üìÑ Cole aqui a not√≠cia que voc√™ quer verificar")

    if st.button("Verificar"):
        if noticia.strip() == "":
            st.warning("‚ö†Ô∏è Por favor, insira uma not√≠cia para verificar.")
        else:
            with st.spinner("üß† Aguardando an√°lise completa pelos agentes..."):
                resultado = equipe.kickoff(inputs={"noticia": noticia})
        
            st.success("‚úÖ An√°lise Conclu√≠da na Primeira Crew!")
            exibir_resultados_primeira_crew(resultado)

            with st.spinner("üîç Realizando a classifica√ß√£o..."):
                resultado_classificacao = eqp_classificacao.kickoff(inputs={"noticia": noticia})

            st.success("‚úÖ Classifica√ß√£o Conclu√≠da!")

            st.subheader("üìä Resultado da Classifica√ß√£o")
            try:
                if hasattr(resultado_classificacao, 'tasks_output'):
                    tasks_output = resultado_classificacao.tasks_output
                    for i, task_output in enumerate(tasks_output):
                        st.subheader(f"üßë‚Äçüíº {task_output.agent} - Tarefa {i+1}")
                        st.markdown(f"**Descri√ß√£o da Tarefa:**\n\n{task_output.description}")
                        st.markdown(f"**Resultado:**\n\n{task_output.raw.strip()}")
                        st.divider()
                else:
                    st.error("A chave ou m√©todo 'tasks_output' n√£o foi encontrado no resultado.")
            except Exception as e:
                st.error(f"Erro ao acessar os dados: {str(e)}")

            # (Opcional) Substituir com os outputs reais, se dispon√≠vel
            coletor_resultado = "Resultado do Coletor"
            linguista_resultado = "Resultado do Linguista"
            verificador_resultado = "Resultado do Verificador"
            classificacao_resultado = "Resultado da Classifica√ß√£o"
            inserir_analise(noticia, coletor_resultado, linguista_resultado, verificador_resultado, classificacao_resultado)

            st.subheader("üîç An√°lise Completa")
            st.markdown("""
            ### Agentes Individuais:

            **Agente Coletor**: Busca e apresenta not√≠cias semelhantes.  
            **Agente Lingu√≠stico**: Avalia o tom, estilo e estrutura.  
            **Agente Verificador**: Confere os fatos com fontes confi√°veis.  
            **Agente Classificador**: Classifica a confiabilidade da not√≠cia.
            """)

with aba_historico:
    st.subheader("üìö Hist√≥rico de An√°lises")
    exibir_historico()
